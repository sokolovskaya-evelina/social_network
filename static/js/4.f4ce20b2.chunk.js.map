{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/My posts/Post/Post.module.css","components/Profile/Profile.module.css","components/Profile/My posts/Post/Post.tsx","components/Profile/My posts/MyPosts.tsx","components/Profile/My posts/MyPostsContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","buttonStyle","border","marginTop","fontSize","Post","props","style","marginBottom","className","s","postHeader","user","userAvatar","size","icon","UserOutlined","postInfo","to","postAuthor","htmlType","onClick","deletePost","id","type","CloseOutlined","postContainer","postText","massage","postFooter","likeCount","LikeOutlined","CommentOutlined","ShareAltOutlined","MyPosts","React","memo","postElements","posts","map","post","index","width","title","MyPostReduxForm","onSubmit","value","addPost","newPostText","maxLength50","maxLengthCreator","reduxForm","form","handleSubmit","Item","Field","component","Textarea","name","placeholder","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","status__description","status__description__text","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","profile","error","form__description","descriptionTextDataForm","descriptionTextName","createField","InputControl","CheckboxControl","contactsBlock","Object","keys","contacts","key","message","showIcon","closable","edit_btn","ProfileData","isOwner","goToEditMode","data__description","data__description_full_name","fullName","descriptionText","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","Contact","descriptionTextContacts","styles","cardStyle","ProfileInfo","savePhoto","saveProfile","profile__container","profile__photo_block","photos","large","profileImage","src","upload_btn","custom_file_upload","UploadOutlined","input_file","target","files","length","initialValues","formData","then","Profile","spinning","spin","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getProfilePage","getStatus","console","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/4.f4ce20b2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile__container\":\"ProfileInfo_profile__container__q0jX6\",\"profile__photo_block\":\"ProfileInfo_profile__photo_block__2zkNK\",\"profileImage\":\"ProfileInfo_profileImage__xH3pL\",\"upload_btn\":\"ProfileInfo_upload_btn__1_pz0\",\"custom_file_upload\":\"ProfileInfo_custom_file_upload__yerk4\",\"status__description\":\"ProfileInfo_status__description__21TB2\",\"status__description__text\":\"ProfileInfo_status__description__text__2dOd-\",\"data__description\":\"ProfileInfo_data__description__2v3KS\",\"data__description_full_name\":\"ProfileInfo_data__description_full_name__5cjV4\",\"descriptionText\":\"ProfileInfo_descriptionText__1xx75\",\"descriptionTextContacts\":\"ProfileInfo_descriptionTextContacts__3rA6P\",\"edit_btn\":\"ProfileInfo_edit_btn__2lRGK\",\"form__description\":\"ProfileInfo_form__description__3XIGn\",\"descriptionTextDataForm\":\"ProfileInfo_descriptionTextDataForm__2YAR-\",\"descriptionTextName\":\"ProfileInfo_descriptionTextName__2jhvu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__KhOVT\",\"postHeader\":\"Post_postHeader__3uAx0\",\"user\":\"Post_user__1uIVW\",\"userAvatar\":\"Post_userAvatar__UGchM\",\"postInfo\":\"Post_postInfo__2nUBl\",\"settingIcon\":\"Post_settingIcon__3m2cs\",\"postAuthor\":\"Post_postAuthor__2ubX7\",\"postTime\":\"Post_postTime__3MP5m\",\"postTimeInfo\":\"Post_postTimeInfo__1ANPy\",\"postText\":\"Post_postText__3ppih\",\"postImage\":\"Post_postImage__2vZvK\",\"likes\":\"Post_likes__eNxcn\",\"likesCounter\":\"Post_likesCounter__2Ky0N\",\"postFooter\":\"Post_postFooter___9RE7\",\"postButtonText\":\"Post_postButtonText__369yz\",\"buttonIcon\":\"Post_buttonIcon__1xUGO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spin\":\"Profile_spin__3HpPa\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport {Avatar, Button, Card} from \"antd\";\r\nimport {CloseOutlined, CommentOutlined, LikeOutlined, ShareAltOutlined, UserOutlined} from \"@ant-design/icons\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype MessageType = {\r\n    massage: string\r\n    likeCount: number\r\n    deletePost: (id: string) => void\r\n    id: string\r\n}\r\n\r\nconst buttonStyle = {\r\n    border: 'none',\r\n    marginTop: '15px',\r\n    fontSize: '14px',\r\n}\r\n\r\nconst Post: React.FC<MessageType> = (props) => {\r\n    let deletePost = () => {\r\n        props.deletePost(props.id)\r\n    }\r\n    return (\r\n        <Card style={{marginBottom: '15px', marginTop: '15px'}}>\r\n            <div className={s.postHeader}>\r\n                <div className={s.user}>\r\n                    <Avatar className={s.userAvatar} size={'large'} icon={<UserOutlined/>}/>\r\n                    <div className={s.postInfo}>\r\n                        <NavLink to={'/profile'} className={s.postAuthor}>User</NavLink>\r\n                    </div>\r\n                </div>\r\n                <Button htmlType={'button'} onClick={deletePost} style={buttonStyle} type={'dashed'}\r\n                        icon={<CloseOutlined/>}/>\r\n            </div>\r\n            <div className={s.postContainer}>\r\n                <p className={s.postText}>{props.massage}</p>\r\n            </div>\r\n            <div className={s.postFooter}>\r\n                <Button style={buttonStyle} type={'default'}>{props.likeCount} Like <LikeOutlined/></Button>\r\n                <Button style={buttonStyle} type={'default'} icon={<CommentOutlined/>}>Comment</Button>\r\n                <Button style={buttonStyle} type={'default'} icon={<ShareAltOutlined/>}>Share</Button>\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {FC} from 'react';\r\nimport Post from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport Textarea from \"../../common/FormsControls/FormsControls\";\r\nimport {postDataType} from \"../../../types/types\";\r\nimport {Content} from \"antd/es/layout/layout\";\r\nimport {Button, Card, Form} from 'antd';\r\n\r\ntype MyPostType = {\r\n    addPost: (newPostText: string) => void\r\n    deletePost: (id: string) => void\r\n    posts: Array<postDataType>\r\n    newPostText: string\r\n}\r\n\r\nconst MyPosts: FC<MyPostType> = React.memo((props) => {\r\n    let postElements = props.posts.map((post, index) =>\r\n        <Post key={`${index}_${post.id}`}\r\n              massage={post.post}\r\n              likeCount={post.likeCount}\r\n              deletePost={props.deletePost}\r\n              id={post.id}\r\n        />)\r\n    let addNewPostText = (value: MyPostsFormDataType) => {\r\n        props.addPost(value.newPostText)\r\n    }\r\n\r\n    return (\r\n        <Content style={{width: '100%'}}>\r\n            <Card title=\"Create Post\">\r\n                <MyPostReduxForm onSubmit={addNewPostText}/>\r\n            </Card>\r\n            <Content>\r\n                {postElements}\r\n            </Content>\r\n        </Content>\r\n    )\r\n})\r\n\r\ntype MyPostsFormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst MyPostsForm: React.FC<InjectedFormProps<MyPostsFormDataType>> = (props) => {\r\n    return (\r\n        <>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <Form.Item>\r\n                    <Field\r\n                        component={Textarea}\r\n                        name={'newPostText'}\r\n                        placeholder={'Enter your message'}\r\n                        validate={[required, maxLength50]}\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button htmlType=\"submit\" type=\"primary\">\r\n                        Add post\r\n                    </Button>\r\n                </Form.Item>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nconst MyPostReduxForm = reduxForm<MyPostsFormDataType>({form: 'post'})(MyPostsForm)\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator, deletePost} from \"../../../redux/profile_reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\n//TODO типизация\r\n\r\nlet mapStateToProps = (state: any) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        },\r\n        deletePost: (id: string) => {\r\n            dispatch(deletePost(id))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {Input} from \"antd\";\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\nexport type ProfileStatusPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    return (\r\n        <div className={s.status__description}>\r\n            <b className={s.status__description__text}>Status:</b>\r\n            {!editMode &&\r\n            <i onDoubleClick={activateEditMode} className={s.status}>\r\n                {props.status\r\n                    ? props.status\r\n                    : 'Изменить статус'}\r\n            </i>}\r\n            {editMode &&\r\n            <Input onChange={onStatusChange}\r\n                   autoFocus={true}\r\n                   onBlur={deactivateEditMode}\r\n                   type=\"text\"\r\n                   value={status}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport Textarea, {CheckboxControl, createField, InputControl} from \"../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ProfileType} from \"../../../types/types\";\r\nimport {Alert, Button} from \"antd\";\r\n\r\n\r\ntype ProfileDataFormType = {\r\n    initialValues: ProfileType,\r\n    profile: ProfileType\r\n}\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, ProfileDataFormType> & ProfileDataFormType>\r\n    = ({handleSubmit, profile, error}) => {\r\n\r\n    return (\r\n        <form className={s.form__description} onSubmit={handleSubmit}>\r\n                    <span className={s.descriptionTextDataForm}>\r\n                        <b className={s.descriptionTextName}>Full name: </b>\r\n                        {createField('Full name', 'fullName', [], InputControl)}\r\n                    </span>\r\n            <span className={s.descriptionTextDataForm}>\r\n                <b className={s.descriptionTextName}>Looking for a job: </b>\r\n                {createField('', 'lookingForAJob', [], CheckboxControl, {type: 'checkbox'})}\r\n            </span>\r\n            <span className={s.descriptionTextDataForm}>\r\n                        <b className={s.descriptionTextName}>My professional skills:\r\n                            {createField('', 'lookingForAJobDescription', [], Textarea)}\r\n                        </b>\r\n\r\n                    </span>\r\n            <span className={s.descriptionTextDataForm}>\r\n                        <b className={s.descriptionTextName}>Contacts:</b>\r\n                <span className={s.contactsBlock}>\r\n                    {Object.keys(profile.contacts).map(key => {\r\n                        return <div key={key} className={s.descriptionTextDataForm}>\r\n                            <b className={s.descriptionTextName}>{key}:</b>\r\n                            {createField(key, 'contacts.' + key, [], InputControl)}\r\n                        </div>\r\n                    })}\r\n                </span>\r\n            </span>\r\n            {error && <Alert message={error} type=\"error\" showIcon closable/>}\r\n            <Button className={s.edit_btn} htmlType={'submit'} type={'primary'}>Save</Button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, ProfileDataFormType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import {ContactsType, ProfileType} from \"../../../types/types\";\r\nimport React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {Button} from \"antd\";\r\n\r\ntype ProfileDataType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\nexport const ProfileData: React.FC<ProfileDataType> = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div className={s.data__description}>\r\n            <div className={s.data__description_full_name}>\r\n                <b>{profile.fullName}</b>\r\n            </div>\r\n            <div className={s.descriptionText}>\r\n                        <b>Looking for a job: </b>\r\n                {profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            <div className={s.descriptionText}>\r\n                        <b>My professional skills: </b>\r\n                {profile.lookingForAJobDescription}\r\n            </div>\r\n            <div className={s.descriptionText}>\r\n                <b>Contacts: </b> {Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key}\r\n                                contactValue={profile.contacts[key as keyof ContactsType]}/>})}\r\n            </div>\r\n            {isOwner && <Button className={s.edit_btn} htmlType={'button'} type={'primary'} onClick={goToEditMode}>Edit</Button>}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\nconst Contact: React.FC<ContactType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={s.descriptionTextContacts}>\r\n            <b>{contactTitle}: </b>{contactValue ? contactValue : <i>not specified</i>}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {ProfileType} from \"../../../types/types\";\r\nimport {Button, Card, Image, Spin} from \"antd\";\r\nimport {Content} from \"antd/es/layout/layout\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {ProfileData} from \"./ProfileData\";\r\nimport userAvatar from './../../../assets/user.png'\r\nimport {UploadOutlined} from \"@ant-design/icons\";\r\n\r\nexport type ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    isOwner: boolean\r\n    status: string\r\n    savePhoto: (photo: File) => void\r\n    updateStatus: (status: string) => void\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}\r\n\r\nconst styles = {\r\n    cardStyle: {\r\n        width: '100%',\r\n        marginBottom: '20px'\r\n    },\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> =\r\n    ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n        const [editMode, setEditMode] = useState<boolean>(false)\r\n        if (!profile) {\r\n            return <Spin/>\r\n        }\r\n\r\n        const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n            if (e.target.files && e.target.files.length) {\r\n                savePhoto(e.target.files[0])\r\n            }\r\n        }\r\n        const onSubmit = (formData: any) => {\r\n            saveProfile(formData).then(\r\n                () => {\r\n                    setEditMode(false)\r\n                })\r\n        }\r\n        return (\r\n            <Card style={styles.cardStyle}>\r\n                <Content className={s.profile__container}>\r\n                    <div className={s.profile__photo_block}>\r\n                        {profile.photos.large\r\n                            ? <Image className={s.profileImage} src={profile.photos.large}/>\r\n                            : <Image className={s.profileImage} src={userAvatar}/>}\r\n                        <ProfileStatusWithHooks profile={profile} status={status}\r\n                                                updateStatus={updateStatus}/>\r\n                        {isOwner && <Button type={'primary'} className={s.upload_btn}>\r\n                            <label className={s.custom_file_upload}>\r\n                                <UploadOutlined/>\r\n                                <input type={'file'} className={s.input_file} onChange={onMainPhotoSelected}/>\r\n                                Upload photo\r\n                            </label>\r\n                        </Button>\r\n                        }\r\n                    </div>\r\n                    <div>\r\n\r\n                        {editMode\r\n                            ? <ProfileDataForm initialValues={profile}\r\n                                               onSubmit={onSubmit}\r\n                                               profile={profile}\r\n                            />\r\n                            : <ProfileData profile={profile}\r\n                                           isOwner={isOwner}\r\n                                           goToEditMode={() => setEditMode(true)}/>}\r\n                    </div>\r\n                </Content>\r\n            </Card>\r\n        )\r\n    }\r\nexport default ProfileInfo;\r\n\r\n\r\n//TODO: сделать отрисовку иконок\r\n\r\n// <span className={s.descriptionTextContacts}>\r\n//                         <b><i className=\"fab fa-facebook-f\">:</i></b>\r\n//     {profile.contacts.facebook ? profile.contacts.facebook : 'not specified'}\r\n//                     </span>\r\n// <span className={s.descriptionTextContacts}>\r\n//                         <b><i className=\"fab fa-linkedin\">:</i></b>{\r\n//     profile.contacts.website ? profile.contacts.website : 'not specified'}\r\n//                     </span>\r\n// <span className={s.descriptionTextContacts}>\r\n//                         <b><i className=\"fab fa-vk\">:</i></b>\r\n//     {profile.contacts.vk ? profile.contacts.vk : 'not specified'}\r\n//                     </span>\r\n// <span className={s.descriptionTextContacts}>\r\n//                         <b><i className=\"fab fa-twitter\">:</i></b>\r\n//     {profile.contacts.instagram ? profile.contacts.instagram : 'not specified'}\r\n//                     </span>\r\n// <span className={s.descriptionTextContacts}>\r\n//                         <b><i className=\"fab fa-instagram\">:</i></b>\r\n//     {profile.contacts.instagram ? profile.contacts.instagram : 'not specified'}\r\n//                     </span>\r\n// <span className={s.descriptionTextContacts}>\r\n//                         <b><i className=\"fab fa-youtube\">:</i></b>\r\n//     {profile.contacts.youtube ? profile.contacts.youtube : 'not specified'}\r\n//                     </span>\r\n// <span className={s.descriptionTextContacts}>\r\n//                         <b><i className=\"fab fa-github\">:</i></b>\r\n//     {profile.contacts.github ? profile.contacts.github : 'not specified'}\r\n//                     </span>\r\n// <span className={s.descriptionTextContacts}>\r\n//                         <b><i className=\"fas fa-link\">:</i></b>\r\n//     {profile.contacts.mainLink ? profile.contacts.mainLink : 'not specified'}\r\n//                     </span>","import React from 'react';\r\nimport MyPostsContainer from \"./My posts/MyPostsContainer\"\r\nimport {Spin} from \"antd\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {ProfileType} from \"../../types/types\";\r\nimport s from './Profile.module.css'\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    isOwner: boolean\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\nconst Profile = (props: PropsType) => {\r\n    return (\r\n        <Spin spinning={!props.profile} className={s.spin}>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer/>\r\n        </Spin>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from 'react';\r\nimport Profile from './Profile';\r\nimport {connect} from \"react-redux\";\r\nimport {getProfilePage, getStatus, savePhoto, saveProfile, updateStatus} from \"../../redux/profile_reducer\";\r\nimport {withRouter, RouteComponentProps} from 'react-router-dom';\r\nimport {withAuthRedirect} from \"../../HOC/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {reduxStoreType} from \"../../redux/redux_store\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    getProfilePage: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string)=>void\r\n    savePhoto: (file: File)=>void\r\n    saveProfile: (profile: ProfileType)=> Promise<any>\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    refreshProfile() {\r\n        let userId: number|null = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n\r\n        }\r\n        if (!userId) {\r\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\r\n        } else {\r\n            this.props.getProfilePage(userId)\r\n            this.props.getStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: reduxStoreType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getProfilePage, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect,\r\n)(ProfileContainer)\r\n\r\n"],"sourceRoot":""}