{"version":3,"sources":["components/Users/Users.module.css","utils/validators/validators.ts","redux/profile_reducer.ts","HOC/WithAuthRedirect.tsx","redux/dialogs_reducer.ts","assets/user.png","components/common/FormsControls/FormsControls.module.css","components/Header/Header.module.css","api/api.ts","redux/auth_reducer.ts","redux/app_reducer.ts","utils/object-helpers.ts","redux/users_reducer.ts","redux/redux_store.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Login/Login.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Navbar/Navbar.tsx","components/Header/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/common/FormsControls/FormsControls.tsx","components/Login/Login.module.css"],"names":["module","exports","required","value","maxLengthCreator","maxLength","length","ADD_POST","SET_USER_PROFILE","SET_STATUS","SAVE_PHOTO_SUCCESS","DELETE_POST","initialState","posts","id","likeCount","post","profile","status","addPostActionCreator","newPostText","type","deletePost","setStatus","getProfilePage","userId","dispatch","a","profileAPI","getProfile","response","getStatus","updateStatus","resultCode","ResultCodeEnum","Success","savePhoto","file","photos","data","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","ProfileReducer","state","action","newPost","filter","p","mapStateToPropsForRedirect","isAuth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","ADD_MESSAGE","dialogsData","name","messageData","message","addMessageAC","newMessageText","DialogsReducer","ResultCodeForCaptcha","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","res","follow","unfollow","delete","put","photoFile","formData","FormData","append","authAPI","me","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptchaUrl","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","captchaUrl","setAuthUserData","payload","getCaptchaUrlSuccess","getAuthUserData","url","AuthReducer","INITIALIZED_SUCCESS","initialized","appReducer","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","followSuccess","userID","unFollowSuccess","setCurrentPages","toggleInFetching","toggleIsFollowingProgress","followUnfollowFlow","apiMethod","actionCreator","UsersReducer","followed","count","reducers","combineReducers","profilePage","dialogsPage","usersPage","app","form","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Paginator","onPageChanged","total","showSizeChanger","onChange","styles","userBlock","width","margin","User","user","className","s","style","display","small","userPhoto","src","alt","size","icon","UserOutlined","userDescription","marginTop","UserDeleteOutlined","disabled","some","onClick","UserAddOutlined","Users","getUsersPages","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageNumber","currentValue","spinning","unFollow","bind","totalCount","LoginReduxForm","reduxForm","handleSubmit","error","onSubmit","form__input","createField","InputControl","form__checkbox","undefined","CheckboxControl","form__checkbox__text","form__button","htmlType","loginUser","form__container","News","Music","Settings","Navbar","theme","mode","defaultSelectedKeys","Item","ProfileOutlined","MessageOutlined","ReadOutlined","CustomerServiceOutlined","SettingOutlined","HeaderComponent","useSelector","useDispatch","userAvatar","Header","Layout","Sider","Content","DialogsContainer","lazy","ProfileContainer","mainLayout","minHeight","height","App","catchAllUnhandledErrors","alert","collapsed","toggle","setState","initializeApp","addEventListener","removeEventListener","trigger","collapsible","padding","createElement","MenuUnfoldOutlined","MenuFoldOutlined","Suspense","fallback","exact","path","render","AppContainer","withRouter","photo","promise","all","SocialNetworkApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById","TextArea","Input","FormControl","meta","touched","children","hasError","showIcon","input","restProps","placeholder","validators","component","form__item","validate","Textarea","minWidth"],"mappings":"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","file":"static/js/main.bd46b32f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"userBlock\":\"Users_userBlock__pP45E\",\"paginationBlock\":\"Users_paginationBlock__39sE2\",\"page\":\"Users_page__3KGly\",\"active\":\"Users_active__SYpTy\",\"userInformation\":\"Users_userInformation__22EcP\",\"followButton\":\"Users_followButton__3DkDc\",\"followIcon\":\"Users_followIcon__1RYxd\",\"userDescription\":\"Users_userDescription__39_Vf\",\"userPhoto\":\"Users_userPhoto__H4-bv\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined\r\n\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n\r\n    return undefined\r\n}","import {profileAPI, ResultCodeEnum} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {BaseThunkType} from \"./redux_store\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\n\r\nconst ADD_POST = 'profile/ADD-POST';\r\nconst SET_USER_PROFILE = \"profile/SET-USER-PROFILE\";\r\nconst SET_STATUS = \"profile/SET-STATUS\";\r\nconst SAVE_PHOTO_SUCCESS = \"profile/SAVE-PHOTO-SUCCESS\";\r\nconst DELETE_POST = 'profile/DELETE_POST'\r\nconst SAVE_PROFILE_SUCCESS = 'profile/SAVE_PROFILE_SUCCESS'\r\n\r\nexport type ActionsTypes =\r\n    | ReturnType<typeof addPostActionCreator>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setStatus>\r\n    | ReturnType<typeof savePhotoSuccess>\r\n    | ReturnType<typeof saveProfileSuccess>\r\n    | ReturnType<typeof deletePost>\r\ntype initialStateType = typeof initialState\r\ntype DispatchType = Dispatch<ActionsTypes>\r\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, likeCount: 5, post: 'Hi! How are you?'},\r\n        {id: 2, likeCount: 15, post: 'I learn React!)))'},\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: ''\r\n}\r\n\r\n\r\nconst ProfileReducer = (state = initialState, action: ActionsTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                post: action.newPostText,\r\n                likeCount: 0\r\n            }\r\n            return {...state, posts: [newPost, ...state.posts,]}\r\n        }\r\n        case DELETE_POST:\r\n            return {...state, posts: [...state.posts.filter(p => p.id !== action.id)]}\r\n        case SAVE_PHOTO_SUCCESS:\r\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\r\n        case SET_USER_PROFILE:\r\n            return {...state, profile: action.profile}\r\n        case SET_STATUS:\r\n            return {...state, status: action.status}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = (newPostText: string) => ({type: ADD_POST, newPostText} as const)\r\nexport const deletePost = (id: number) => ({type: DELETE_POST, id} as const)\r\nexport const setStatus = (status: string) => ({type: SET_STATUS, status} as const)\r\nexport const setUserProfile = (profile: ProfileType) => ({type: SET_USER_PROFILE, profile} as const)\r\nexport const savePhotoSuccess = (photos: PhotosType) => ({type: SAVE_PHOTO_SUCCESS, photos} as const)\r\nexport const saveProfileSuccess = (profile: ProfileType) => ({type: SAVE_PROFILE_SUCCESS, profile} as const)\r\n\r\nexport const getProfilePage = (userId: number) => async (dispatch: Dispatch<ActionsTypes>) => {\r\n    const response = await profileAPI.getProfile(userId)\r\n    dispatch(setUserProfile(response))\r\n}\r\nexport const getStatus = (userId: number) => async (dispatch: DispatchType) => {\r\n    const response = await profileAPI.getStatus(userId)\r\n    dispatch(setStatus(response))\r\n}\r\nexport const updateStatus = (status: string) => async (dispatch: DispatchType) => {\r\n    try {\r\n        const response = await profileAPI.updateStatus(status)\r\n        if (response.resultCode === ResultCodeEnum.Success) {\r\n            dispatch(setStatus(status))\r\n        }\r\n    } catch (error) {\r\n\r\n    }\r\n\r\n}\r\nexport const savePhoto = (file: File) => async (dispatch: DispatchType) => {\r\n    const response = await profileAPI.savePhoto(file)\r\n    if (response.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(savePhotoSuccess(response.data))\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    const data = await profileAPI.saveProfile(profile)\r\n\r\n    if (data.resultCode === 0) {\r\n        if (userId != null) {\r\n            dispatch(getProfilePage(userId))\r\n        } else {\r\n            throw new Error(\"userId can't be null\")\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0]}))\r\n        return Promise.reject(data.messages[0])\r\n    }\r\n}\r\n\r\nexport default ProfileReducer\r\n\r\n","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state: any) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport const withAuthRedirect = (Component: any) => {\r\n    class RedirectComponent extends React.Component<any, any> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n            return <Component {...this.props}/>;\r\n        }\r\n    }\r\n\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n};\r\n\r\n","import {dialogsDataType, messageDataType} from \"../types/types\";\r\n\r\nconst ADD_MESSAGE = \"dialogs/ADD-MESSAGE\";\r\n\r\n\r\nexport type ActionsTypes = ReturnType<typeof addMessageAC>\r\ntype initialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    dialogsData: [\r\n        {id: 1, name: 'Katya'},\r\n        {id: 2, name: 'Sasha'},\r\n        {id: 3, name: 'Eva'},\r\n        {id: 4, name: 'Alisa'},\r\n        {id: 5, name: 'Ivan'},\r\n        {id: 6, name: 'Roma'},\r\n    ] as Array<dialogsDataType>,\r\n    messageData: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'Hello'},\r\n        {id: 3, message: 'How are you?'},\r\n        {id: 4, message: 'Fine. And you?'},\r\n        {id: 5, message: 'Good. Thanks'}\r\n    ] as Array<messageDataType>,\r\n}\r\n\r\nconst DialogsReducer = (state: initialStateType = initialState, action: ActionsTypes): initialStateType => {\r\n    let stateCopy\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            stateCopy = {\r\n                ...state,\r\n                messageData: [...state.messageData, {\r\n                    id: 7,\r\n                    message: action.newMessageText\r\n                }],\r\n            }\r\n            return stateCopy\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport const addMessageAC = (newMessageText: string) => ({type: ADD_MESSAGE, newMessageText} as const)\r\n\r\nexport default DialogsReducer","export default __webpack_public_path__ + \"static/media/user.a634a2f6.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form_summary_error\":\"FormsControls_form_summary_error__1-4rE\",\"error\":\"FormsControls_error__3oE9L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Header_userPhoto__1bH2a\"};","import axios from \"axios\";\r\nimport {PhotosType, ProfileType, UserType} from \"../types/types\";\r\n\r\nexport enum ResultCodeEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\ntype MeResponseType = {\r\n    data: {\r\n        id: number\r\n        email: string\r\n        login: string\r\n    }\r\n    resultCode: ResultCodeEnum\r\n    messages: Array<string>\r\n}\r\ntype LoginMeResponseType = {\r\n    resultCode: ResultCodeEnum | ResultCodeForCaptcha\r\n    messages: Array<string>\r\n    data: {\r\n        userId: number\r\n    }\r\n}\r\ntype commonResponseType<P = {}> = {\r\n    data: P\r\n    resultCode: ResultCodeEnum\r\n    messages: Array<string>\r\n}\r\ntype UserResponseType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"fe3cd028-48b8-4f24-aace-482e17e6fa4c\"\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get<UserResponseType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(res => res.data)\r\n    },\r\n    follow(id: number = 2) {\r\n        return instance.post<commonResponseType>(`follow/${id}`)\r\n    },\r\n    unfollow(id: number = 2) {\r\n        return instance.delete<commonResponseType<SavePhotoResponseDataType>>(`follow/${id}`)\r\n    },\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number = 2) {\r\n        return instance.get<ProfileType>(`profile/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<commonResponseType>(`profile/status`, {status: status})\r\n            .then(res => res.data)\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData()\r\n        formData.append('image', photoFile)\r\n        return instance.put<commonResponseType<PhotosType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n            .then(res => res.data)\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put <commonResponseType>(`profile`, profile)\r\n            .then(res => res.data)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<MeResponseType>(`auth/me`)\r\n            .then(res => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: string | null = null) {\r\n        return instance.post<LoginMeResponseType>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance.delete<LoginMeResponseType>(`auth/login`)\r\n            .then(res => res.data)\r\n    }\r\n}\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<{ url: string }>('/security/get-captcha-url')\r\n    }\r\n}\r\n\r\n","import {authAPI, ResultCodeEnum, securityAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst SET_USER_DATA = 'auth/SET_USER_DATA'\r\nconst GET_CAPTCHA_URL_SUCCESS = 'auth/GET_CAPTCHA_URL_SUCCESS'\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null\r\n}\r\n\r\ntype initialStateType = typeof initialState\r\ntype ActionTypes =\r\n    | ReturnType<typeof getCaptchaUrlSuccess>\r\n| ReturnType<typeof setAuthUserData>\r\n\r\nconst AuthReducer = (state = initialState, action: ActionTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case GET_CAPTCHA_URL_SUCCESS:\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: SET_USER_DATA,\r\n        payload: {userId, email, login, isAuth}\r\n    } as const\r\n)\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string | null) => ({\r\n        type: GET_CAPTCHA_URL_SUCCESS,\r\n        payload: {captchaUrl}\r\n    } as const\r\n)\r\n\r\nexport const getAuthUserData = () => async (dispatch: Dispatch) => {\r\n    let response = await authAPI.me()\r\n\r\n    if (response.resultCode === ResultCodeEnum.Success) {\r\n        let {id, email, login} = response.data\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const logoutUser = () => async (dispatch: Dispatch) => {\r\n    let response = await authAPI.logout()\r\n\r\n    if (response.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(setAuthUserData(null, null, null, false))\r\n    } else {\r\n        let message = response.messages.length > 0 ? response.messages[0] : 'Some Error'\r\n        dispatch(stopSubmit(\"login\", {_error: message}))\r\n    }\r\n}\r\nexport const loginUser = (email: string, password: string, rememberMe: boolean, captcha: string|null) => async (dispatch: any) => {\r\n    let response = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (response.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (response.resultCode === 10) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        let message = response.messages.length > 0 ? response.messages[0] : 'Some Error'\r\n        dispatch(stopSubmit(\"login\", {_error: message}))\r\n    }\r\n}\r\nexport const getCaptchaUrl = () => async (dispatch: Dispatch) => {\r\n    let response = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = response.data.url\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport default AuthReducer","import {Dispatch} from \"redux\";\r\nimport {getAuthUserData} from \"./auth_reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS'\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n}\r\n\r\ntype initialStateType = typeof initialState\r\ntype ActionTypes =\r\n    | ReturnType<typeof initializedSuccess>\r\n\r\nconst appReducer = (state = initialState, action: ActionTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () => ({type: INITIALIZED_SUCCESS} as const)\r\n\r\nexport const initializeApp = () => (dispatch: Dispatch<any>) => {\r\n    let promise = dispatch(getAuthUserData())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess())\r\n        })\r\n}\r\n\r\nexport default appReducer","export const updateObjectInArray = (items: any, itemId: number, objPropName: string, newObjProps: any) => {\r\n    return items.map((u: any) => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u\r\n    })\r\n}","import {ResultCodeEnum, usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {UserType} from \"../types/types\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\n\r\nconst FOLLOW = 'users/FOLLOW'\r\nconst UNFOLLOW = 'users/UNFOLLOW'\r\nconst SET_USERS = 'users/SET_USERS'\r\nconst SET_CURRENT_PAGE = 'users/SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'users/SET_TOTAL_USERS_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'users/TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'users/TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\nexport type userInitialStateType = typeof initialState\r\nexport type DispatchType = Dispatch<ActionsTypes>\r\nexport type ActionsTypes =\r\n    ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unFollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPages>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleInFetching>\r\n    | ReturnType<typeof toggleIsFollowingProgress>\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>\r\n}\r\n\r\nconst UsersReducer = (state = initialState, action: ActionsTypes): userInitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userID, 'id', {followed: true})\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userID, 'id', {followed: false})\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.count}\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state, followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userID]\r\n                    : state.followingInProgress.filter((id: number) => id !== action.userID)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userID: number) => ({type: FOLLOW, userID} as const)\r\nexport const unFollowSuccess = (userID: number) => ({type: UNFOLLOW, userID} as const)\r\nexport const setUsers = (users: Array<UserType>) => ({type: SET_USERS, users} as const)\r\nexport const setCurrentPages = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    count: totalUsersCount\r\n} as const)\r\nexport const toggleInFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\r\nexport const toggleIsFollowingProgress = (isFetching: boolean, userID: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userID\r\n} as const)\r\n\r\nexport const getUsers = (currentValue: number, pageSize: number) => async (dispatch: DispatchType) => {\r\n    dispatch(toggleInFetching(true))\r\n    dispatch(setCurrentPages(currentValue))\r\n    let data = await usersAPI.getUsers(currentValue, pageSize)\r\n    dispatch(toggleInFetching(false))\r\n    dispatch(setUsers(data.items))\r\n    dispatch(setTotalUsersCount(data.totalCount))\r\n\r\n}\r\n\r\nconst followUnfollowFlow = async (dispatch: DispatchType, userId: number, apiMethod: any, actionCreator: any) => {\r\n    dispatch(toggleIsFollowingProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n    if (response.data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleIsFollowingProgress(false, userId))\r\n}\r\nexport const unFollow = (userId: number) => async (dispatch: DispatchType) => {\r\n     await followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(userId), unFollowSuccess)\r\n\r\n}\r\nexport const follow = (userId: number) => async (dispatch: DispatchType) => {\r\n    await followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(userId), followSuccess)\r\n}\r\n\r\nexport default UsersReducer","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\"\r\nimport ProfileReducer from \"./profile_reducer\";\r\nimport DialogsReducer from \"./dialogs_reducer\";\r\nimport UsersReducer from \"./users_reducer\";\r\nimport AuthReducer from \"./auth_reducer\";\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk'\r\nimport {reducer as formReducer} from \"redux-form\";\r\nimport appReducer from \"./app_reducer\";\r\n\r\nexport type reduxStoreType = ReturnType<typeof reducers>\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, reduxStoreType, unknown, A>\r\nlet reducers = combineReducers({\r\n    profilePage: ProfileReducer,\r\n    dialogsPage: DialogsReducer,\r\n    usersPage: UsersReducer,\r\n    auth: AuthReducer,\r\n    app: appReducer,\r\n    form: formReducer\r\n})\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\nexport default store\r\n","import React from 'react';\r\nimport {Pagination} from \"antd\";\r\n\r\ntype PaginatorPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n\r\n}\r\n\r\nconst Paginator: React.FC<PaginatorPropsType> = ({totalUsersCount, onPageChanged}) => {\r\n    return (\r\n        <Pagination\r\n            total={totalUsersCount | 1}\r\n            showSizeChanger={false}\r\n            onChange={onPageChanged}\r\n        />\r\n    )\r\n};\r\n\r\nexport default Paginator;","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from './Users.module.css'\r\nimport {Avatar, Button, Card} from \"antd\";\r\nimport {UserAddOutlined, UserDeleteOutlined, UserOutlined} from \"@ant-design/icons\";\r\nimport {UserType} from \"../../types/types\";\r\n\r\ntype UsersPropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    unfollow: (id: number) => void\r\n    follow: (id: number) => void\r\n}\r\n\r\nconst styles = {\r\n    userBlock: {\r\n        width: '400px',\r\n        margin: ' 20px 0',\r\n    }\r\n}\r\n\r\nconst User: React.FC<UsersPropsType> = ({user, followingInProgress, follow, unfollow}) => {\r\n    return (\r\n        <div className={s.user}>\r\n            <Card style={styles.userBlock} key={user.id}>\r\n                <div style={{display: 'flex'}}>\r\n                    <NavLink to={'/profile/' + user.id}>\r\n                        {user.photos.small !== null\r\n                            ? <img className={s.userPhoto} src={user.photos.small}\r\n                                   alt={'user avatar'}/>\r\n                            : <Avatar size={64} icon={<UserOutlined/>}/>\r\n                        }\r\n                    </NavLink>\r\n                    <div className={s.userDescription}>\r\n                        <NavLink to={'/profile/' + user.id}><span><b>{user.name}</b></span></NavLink>\r\n                        <span><i>{user.status ? user.status : 'Статус отсутствует'}</i></span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div style={{marginTop: '20px'}}>\r\n                    {user.followed\r\n                        ? <Button\r\n                            type={'primary'}\r\n                            icon={<UserDeleteOutlined/>}\r\n                            disabled={followingInProgress.some((id: number) => id === user.id)} /*className={s.followButton}*/\r\n                            onClick={() => {\r\n                                unfollow(user.id)\r\n                            }}>\r\n                            Unfollow\r\n                        </Button>\r\n                        : <Button\r\n                            type={'primary'}\r\n                            icon={<UserAddOutlined/>}\r\n                            disabled={followingInProgress.some((id: number) => id === user.id)} /*className={s.followButton}*/\r\n                            onClick={() => {\r\n                                follow(user.id)\r\n                            }}>\r\n                            Follow\r\n                        </Button>\r\n                    }\r\n                </div>\r\n            </Card>)\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default User;","import React from 'react';\r\nimport s from './Users.module.css'\r\nimport {UserType} from \"../../types/types\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\n\r\ntype PropsType = {\r\n    users: Array<UserType>\r\n    currentPage: number\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    followingInProgress: Array<number>\r\n    onPageChanged: (pageNumber: number) => void\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\nconst Users: React.FC<PropsType> = ({\r\n                                        totalUsersCount,\r\n                                        pageSize,\r\n                                        currentPage,\r\n                                        followingInProgress,\r\n                                        follow, unfollow, onPageChanged, users\r\n                                    }) => {\r\n    return (\r\n        <div className={s.user}>\r\n            <Paginator currentPage={currentPage}\r\n                       onPageChanged={onPageChanged}\r\n                       totalUsersCount={totalUsersCount}\r\n                       pageSize={pageSize}\r\n            />\r\n            {users.map((u) => <User key={u.id}\r\n                                    user={u}\r\n                                    followingInProgress={followingInProgress}\r\n                                    unfollow={unfollow}\r\n                                    follow={follow}/>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Users;","import {reduxStoreType} from \"./redux_store\";\r\n\r\nexport const getUsersPages = (state: reduxStoreType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getPageSize = (state: reduxStoreType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state: reduxStoreType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: reduxStoreType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: reduxStoreType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: reduxStoreType) => {\r\n    return state.usersPage.followingInProgress\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {follow, getUsers, setCurrentPages, toggleIsFollowingProgress, unFollow,} from \"../../redux/users_reducer\";\r\nimport Users from \"./Users\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../HOC/WithAuthRedirect\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {reduxStoreType} from \"../../redux/redux_store\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsersPages\r\n} from \"../../redux/users-selectors\";\r\nimport {Spin} from \"antd\";\r\n\r\ntype MapStatePropsType = {\r\n    currentValue: number\r\n    pageSize: number,\r\n    currentPage: number\r\n    isFetching: boolean\r\n    totalUsersCount: number\r\n    users: Array<UserType>\r\n    followingInProgress: Array<number>\r\n}\r\ntype MapDispatchPropsType = {\r\n    unFollow: (id: number) => void\r\n    follow: (id: number) => void\r\n    getUsers: (currentValue: number, pageSize: number) => void\r\n}\r\ntype UsersContainerPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nclass UsersContainer extends React.Component<UsersContainerPropsType> {\r\n    componentDidMount() {\r\n        const {currentValue,pageSize} =this.props\r\n        this.props.getUsers(currentValue, pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize} = this.props\r\n        this.props.getUsers(pageNumber, pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <Spin spinning={this.props.isFetching}>\r\n                <Users totalUsersCount={this.props.totalUsersCount}\r\n                       pageSize={this.props.pageSize}\r\n                       currentPage={this.props.currentPage}\r\n                       onPageChanged={this.onPageChanged}\r\n                       users={this.props.users}\r\n                       follow={this.props.follow}\r\n                       unfollow={this.props.unFollow}\r\n                       followingInProgress={this.props.followingInProgress}\r\n                />\r\n            </Spin>\r\n        </>\r\n\r\n    }\r\n}\r\n\r\n//TODO спросить типизацию\r\nlet mapStateToProps = (state: reduxStoreType) => {\r\n    return {\r\n        users: getUsersPages(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, {\r\n        follow,\r\n        unFollow,\r\n        setCurrentPages,\r\n        toggleIsFollowingProgress,\r\n        getUsers\r\n    })\r\n)(UsersContainer)\r\n","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {CheckboxControl, createField, InputControl} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {loginUser} from \"../../redux/auth_reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport s from './Login.module.css'\r\nimport {reduxStoreType} from \"../../redux/redux_store\";\r\nimport {Button, message} from \"antd\";\r\nimport {Content} from \"antd/es/layout/layout\";\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType, LoginFormOwnProps> & LoginFormOwnProps> =\r\n    ({handleSubmit, captchaUrl, error}) => {\r\n        const onError = () => {\r\n            if (error) {\r\n                return message.error(error)\r\n            }\r\n        }\r\n        return (\r\n            <form className={s.form} onSubmit={handleSubmit}>\r\n                <div className={s.form__input}>\r\n                    {createField('Email', 'email', [required,], InputControl)}\r\n                </div>\r\n                <div className={s.form__input}>\r\n                    {createField('Password', 'password', [required,], InputControl, {type: 'password'})}\r\n                </div>\r\n                <div className={s.form__checkbox}>\r\n                    {createField(undefined, 'rememberMe', [], CheckboxControl, {type: 'checkbox'})}\r\n                    <span className={s.form__checkbox__text}>Remember me</span>\r\n                </div>\r\n                {captchaUrl && <img src={captchaUrl} alt='captcha'/>}\r\n                <div className={s.form__input}>\r\n                    {captchaUrl && createField('Symbols from image', 'captcha', [], InputControl)}\r\n                </div>\r\n\r\n                <Button onClick={onError} className={s.form__button} htmlType=\"submit\" type={'primary'}>Login</Button>\r\n            </form>\r\n        );\r\n    };\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\nconst LoginReduxForm = reduxForm<FormDataType, LoginFormOwnProps>({form: 'login'})(LoginForm)\r\n\r\n\r\nconst Login = (props: any) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.loginUser(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <Content className={s.form__container}>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n        </Content>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: reduxStoreType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl\r\n})\r\n\r\nexport default connect(mapStateToProps, {loginUser})(Login);","import React from \"react\";\r\n\r\nexport const News = () => {\r\n    return (\r\n        <div>News</div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport const Music = () => {\r\n    return (\r\n        <div>Music</div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport const Settings = () => {\r\n    return (\r\n        <div>Settings</div>\r\n    )\r\n}","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Menu} from 'antd';\r\nimport {\r\n    CustomerServiceOutlined,\r\n    MessageOutlined,\r\n    ProfileOutlined,\r\n    ReadOutlined,\r\n    SettingOutlined,\r\n    UserOutlined\r\n} from \"@ant-design/icons\";\r\n\r\n\r\nexport const Navbar = () => {\r\n    return (\r\n        <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\r\n            <Menu.Item key={\"1\"} icon={<ProfileOutlined/>}>\r\n                <NavLink to='/profile'>Profile</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key={\"2\"} icon={<MessageOutlined/>}>\r\n                <NavLink to='/dialogs'>Messages</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key={\"3\"} icon={<UserOutlined/>}>\r\n                <NavLink to='/users'>Users</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key={\"4\"} icon={<ReadOutlined/>}>\r\n                <NavLink to='/news'>News</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key={\"5\"} icon={<CustomerServiceOutlined/>}>\r\n                <NavLink to='/music'>Music</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key={\"6\"} icon={<SettingOutlined/>}>\r\n                <NavLink to='/settings'>Settings</NavLink>\r\n            </Menu.Item>\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {Button} from \"antd\";\r\nimport style from './Header.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {reduxStoreType} from \"../../redux/redux_store\";\r\nimport {logoutUser} from \"../../redux/auth_reducer\";\r\nimport userAvatar from './../../assets/user.png'\r\n\r\nexport type HeaderPropsType = {\r\n    login: string,\r\n    isAuth: boolean,\r\n    logoutUser: () => void\r\n}\r\n\r\nconst HeaderComponent: React.FC = () => {\r\n    const isAuth = useSelector<reduxStoreType, boolean>(state => state.auth.isAuth)\r\n    const userPhoto = useSelector<reduxStoreType, string | null | undefined>(state => state.profilePage.profile?.photos.small)\r\n    const dispatch = useDispatch()\r\n\r\n    const logout = () => {\r\n        dispatch(logoutUser())\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isAuth\r\n                ? <div>\r\n                    <img src={userPhoto || userAvatar} alt='user avatar' className={style.userPhoto}/>\r\n                    <Button type='primary'\r\n                            onClick={logout}>\r\n                        Logout\r\n                    </Button>\r\n                </div>\r\n                :\r\n                <NavLink to={'/login'}>\r\n                    <Button type='primary'>\r\n\r\n                        Login\r\n                    </Button>\r\n                </NavLink>\r\n\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default HeaderComponent;\r\n\r\n","import React from 'react'\r\nimport './App.css';\r\nimport {HashRouter, Redirect, Route, Switch, withRouter} from \"react-router-dom\"\r\nimport '@fortawesome/fontawesome-free/css/all.min.css'\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/app_reducer\";\r\nimport store, {reduxStoreType} from \"./redux/redux_store\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport Login from \"./components/Login/Login\";\r\nimport {News} from \"./components/News/News\";\r\nimport {Music} from \"./components/Music/Music\";\r\nimport {Settings} from \"./components/Settings/Settings\";\r\nimport 'antd/dist/antd.css';\r\nimport {Layout, Spin,} from 'antd';\r\nimport {MenuFoldOutlined, MenuUnfoldOutlined,} from '@ant-design/icons';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport HeaderComponent from \"./components/Header/Header\";\r\n\r\nconst {Header, Sider, Content} = Layout;\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\r\n\r\nconst styles = {\r\n    mainLayout: {\r\n        minHeight: '100vh',\r\n        height: '100%'\r\n    }\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\n\r\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\r\n    catchAllUnhandledErrors = () => {\r\n        alert('Some error occured')\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    state = {\r\n        collapsed: false,\r\n    };\r\n    toggle = () => {\r\n        this.setState({\r\n            collapsed: !this.state.collapsed,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Spin className='preloader' spinning={!this.props.initialized}>\r\n                <Layout className='main_layout' style={styles.mainLayout}>\r\n                    <Sider trigger={null} collapsible collapsed={this.state.collapsed}>\r\n                        <Navbar/>\r\n                    </Sider>\r\n                    <Layout className=\"site-layout\">\r\n                        <Header style={{padding: '0 20px'}} className=\"site-layout-background\">\r\n                            {React.createElement(this.state.collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\r\n                                className: 'trigger',\r\n                                onClick: this.toggle,\r\n                            })}\r\n                            <HeaderComponent/>\r\n                        </Header>\r\n                        <Content className='main_content'>\r\n                            <React.Suspense fallback={<Spin/>}>\r\n                                <Switch>\r\n                                    <Route exact path='/' render={() => <Redirect to={'/profile'}/>}/>\r\n                                    <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\r\n                                    <Route path='/dialogs' render={() => <DialogsContainer/>}/>\r\n                                    <Route path='/users' render={() => <UsersContainer/>}/>\r\n                                    <Route path='/login' render={() => <Login/>}/>\r\n                                    <Route path='/news' render={() => <News/>}/>\r\n                                    <Route path='/music' render={() => <Music/>}/>\r\n                                    <Route path='/settings' render={() => <Settings/>}/>\r\n                                    <Route path='*' render={() => <h1>404 PAGE NOT FOUND</h1>}/>\r\n                                </Switch>\r\n                            </React.Suspense>\r\n                        </Content>\r\n                    </Layout>\r\n                </Layout>\r\n            </Spin>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: reduxStoreType) => ({\r\n    initialized: state.app.initialized,\r\n    photo: state.profilePage.profile?.photos.small\r\n})\r\nlet AppContainer = compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))\r\n(App);\r\n\r\nconst SocialNetworkApp = () => {\r\n    return <HashRouter>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </HashRouter>\r\n}\r\n\r\nexport default SocialNetworkApp","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css'\r\nimport ReactDOM from 'react-dom';\r\nimport SocialNetworkApp from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(<SocialNetworkApp/>, document.getElementById('root'));\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n\r\n\r\n","import React, {FC} from 'react';\r\nimport s from './FormsControls.module.css'\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {Alert, Checkbox, Input} from 'antd';\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\n\r\nconst {TextArea} = Input;\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst styles = {\r\n    error: {\r\n        marginTop: '10px',\r\n    }\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div>\r\n            <div>{children}</div>\r\n            {hasError && <Alert style={styles.error} message={error} type=\"error\" showIcon />}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <TextArea style={{minWidth: '420px', width: '100%'}}\r\n                      {...input} {...restProps} />\r\n        </FormControl>)\r\n};\r\n\r\nexport const InputControl: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <Input {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n};\r\nexport const CheckboxControl: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return (\r\n        <>\r\n            <FormControl {...props}>\r\n                <Checkbox  {...input} {...restProps}/>\r\n            </FormControl>\r\n        </>\r\n    )\r\n};\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                                                         name: FormKeysType,\r\n                                                         validators: Array<FieldValidatorType>,\r\n                                                         component: FC<WrappedFieldProps>,\r\n                                                         props = {}) {\r\n    return <span className={s.form__item}> <Field name={name} component={component} placeholder={placeholder}\r\n                                                  validate={validators} {...props}/> </span>\r\n}\r\n\r\n\r\nexport default Textarea;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form__container\":\"Login_form__container__2E6yT\",\"form\":\"Login_form__2hBfP\",\"form__input\":\"Login_form__input__3osNe\",\"form__checkbox\":\"Login_form__checkbox__2ODAt\",\"form__checkbox__text\":\"Login_form__checkbox__text__17AFR\",\"form__button\":\"Login_form__button__1zZ7v\"};"],"sourceRoot":""}